generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                               Int             @id @default(autoincrement())
  login                            String          @db.VarChar(255)
  password_hash                    String          
  is_admin                         Boolean         @default(false) 
  accountInfo                      account_info?   
  company                          company[]
  employer                         employer?
  favorite                         favorite[]
  messageFrom                      message[]       @relation("message_from_idToaccount")
  messageTo                        message[]       @relation("message_to_idToaccount")
  reply                            reply[]
  token                            token[]
  invites                          invite[]
}

model account_info {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255)
  email   String? @db.VarChar(255)
  website String? @db.VarChar(255)
  about   String?
  account account @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model company {
  id             Int              @id @default(autoincrement())
  owner_id       Int?             
  name           String           @db.VarChar(255)
  about          String?
  website        String?          @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  owner          account?         @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employers      employer[]
  vacancies      vacancy[]
  invites        invite[]
}

model employer {
  account_id Int      @id 
  company_id Int?     
  is_hr   Boolean  @default(false)
  account    account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  company    company? @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  invites    invite[]
  vacancy    vacancy[]
}

model favorite {
  id         Int      @id @default(autoincrement())
  account_id Int?
  vacancy_id Int?
  date       DateTime @default(now()) @db.Timestamp(6)
  account    account? @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vacancy    vacancy? @relation(fields: [vacancy_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model message {
  id                               Int      @id @default(autoincrement())
  from_id                          Int?
  to_id                            Int?
  text                             String
  date                             DateTime @default(now()) @db.Timestamp(6)
  accountFrom                      account? @relation("message_from_idToaccount", fields: [from_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  accountTo                        account? @relation("message_to_idToaccount", fields: [to_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reply {
  id              Int           @id @default(autoincrement())
  vacancy_id      Int?
  account_id      Int?
  date            DateTime      @default(now()) @db.Timestamp(6)
  account         account?      @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  status          reply_status  
  vacancy         vacancy?      @relation(fields: [vacancy_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum reply_status {
    pending
    accepted
    declined
}

model token {
  id         Int      @id @default(autoincrement())
  account_id Int
  token      String
  date       DateTime @db.Timestamp(6)
  account    account? @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model vacancy {
  id            Int             @id @default(autoincrement())
  owner_id      Int?
  company_id    Int?
  title         String          @db.VarChar(255)
  description   String?         @db.VarChar(10000)
  salary        String?         @db.VarChar(255)
  post_date     DateTime        @default(now()) @db.Timestamp(6)
  is_active     Boolean         @default(true)
  favorite      favorite[]
  reply         reply[]
  company       company?        @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author        employer?       @relation(fields: [owner_id], references: [account_id], onDelete: SetNull, onUpdate: NoAction)
}

model invite {
  id         Int             @id @default(autoincrement())
  account_id Int?
  company_id Int?
  inviter_id Int?
  date       DateTime        @default(now()) @db.Timestamp(6)
  account    account?        @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inviter    employer?       @relation(fields: [inviter_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  company    company?        @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
